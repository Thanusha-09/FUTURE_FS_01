portfolio/
├── public/
│   ├── index.html
│   └── assets/ (images, resume PDF)
├── src/
│   ├── components/ (Header, Footer, ProjectCard, etc.)
│   ├── pages/ (Home, About, Portfolio, Contact)
│   ├── App.js
│   └── index.js
├── server/ (for backend, if using)
└── package.json
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';
import Home from './pages/Home';
import About from './pages/About';
import Portfolio from './pages/Portfolio';
import Contact from './pages/Contact';
import Header from './components/Header';
import Footer from './components/Footer';

function App() {
  return (
    <Router>
      <Header />
      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/about" element={<About />} />
        <Route path="/portfolio" element={<Portfolio />} />
        <Route path="/contact" element={<Contact />} />
      </Routes>
      <Footer />
    </Router>
  );
}

export default App;import { Document, Page } from 'react-pdf';
import resumePDF from '../assets/resume.pdf';

function Resume() {
  return (
    <div>
      <h2>My Resume</h2>
      <Document file={resumePDF}>
        <Page pageNumber={1} />
      </Document>
      <a href={resumePDF} download>Download PDF</a>
    </div>
  );
}import { useState, useEffect } from 'react';
import axios from 'axios';

function Portfolio() {
  const [projects, setProjects] = useState([]);

  useEffect(() => {
    axios.get('/api/projects').then(res => setProjects(res.data));
  }, []);

  return (
    <div>
      {projects.map(project => (
        <div key={project.id}>
          <img src={project.image} alt={project.title} />
          <h3>{project.title}</h3>
          <p>{project.description}</p>
          <a href={project.demo}>Demo</a> | <a href={project.repo}>Repo</a>
        </div>
      ))}
    </div>
  );
}.hero {
  background: linear-gradient(to right, #4facfe, #00f2fe);
  color: white;
  padding: 100px 20px;
  text-align: center;
}
@media (max-width: 768px) {
  .hero { padding: 50px 10px; }
}import { Helmet } from 'react-helmet';

function Home() {
  return (
    <>
      <Helmet>
        <title>Your Name - Portfolio</title>
        <meta name="description" content="Showcasing my skills in web development." />
      </Helmet>
      {/* Page content */}
    </>
  );
}const express = require('express');
const cors = require('cors');
const nodemailer = require('nodemailer');
const mongoose = require('mongoose');
const app = express();

app.use(cors());
app.use(express.json());

// Connect to MongoDB
mongoose.connect('your-mongodb-atlas-uri', { useNewUrlParser: true });

// Contact form schema
const contactSchema = new mongoose.Schema({ name: String, email: String, message: String });
const Contact = mongoose.model('Contact', contactSchema);

// Contact endpoint
app.post('/api/contact', async (req, res) => {
  const { name, email, message } = req.body;
  const newContact = new Contact({ name, email, message });
  await newContact.save();

  // Send email notification
  const transporter = nodemailer.createTransporter({
    service: 'gmail',
    auth: { user: 'your-email@gmail.com', pass: 'your-app-password' }
  });
  await transporter.sendMail({
    from: email,
    to: 'your-email@gmail.com',
    subject: 'New Contact Message',
    text: message
  });

  res.status(200).send('Message sent!');
});

app.listen(5000, () => console.log('Server running on port 5000'));import { useState } from 'react';
import axios from 'axios';

function Contact() {
  const [form, setForm] = useState({ name: '', email: '', message: '' });

  const handleSubmit = async (e) => {
    e.preventDefault();
    await axios.post('http://localhost:5000/api/contact', form);
    alert('Message sent!');
  };

  return (
    <form onSubmit={handleSubmit}>
      <input type="text" placeholder="Name" onChange={(e) => setForm({...form, name: e.target.value})} />
      <input type="email" placeholder="Email" onChange={(e) => setForm({...form, email: e.target.value})} />
      <textarea placeholder="Message" onChange={(e) => setForm({...form, message: e.target.value})} />
      <button type="submit">Send</button>
    </form>
  );
}const projectSchema = new mongoose.Schema({ title: String, description: String, image: String, demo: String, repo: String });
const Project = mongoose.model('Project', projectSchema);

app.get('/api/projects', async (req, res) => {
  const projects = await Project.find();
  res.json(projects);
});
